@page "/Login"
@using Services.Users
@using Data.Models
@inject IUserService userService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager Navigate
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<div class="login-container">
    <h3>Login Page</h3>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <form @onsubmit="PerformLogin">
        <div class="form-group">
            <label for="usernameInput">Username</label>
            <input type="text" @bind="username" class="form-control" id="usernameInput" aria-describedby="usernameHelp" placeholder="Enter Username" />
            <small id="usernameHelp" class="form-text text-muted">We'll never share this data with anyone.</small>
        </div>
        <div class="form-group">
            <label for="passwordInput">Password</label>
            <input type="password" @bind="password" class="form-control" id="passwordInput" aria-describedby="passwordHelp" placeholder="Enter Password" />
            <small id="passwordHelp" class="form-text text-muted">We'll never share this data with anyone.</small>
        </div>
        <button type="submit" class="btn btn-success">Login</button>
    </form>
</div>

<style>
    body {
        background-color: black;
    }

    .login-container {
        border-radius: 5px;
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        /*border: solid 1px white;*/ /*DEBUG*/
    }
</style>


@code {
    private string username;
    private string password;
    private string errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            User? user = await sessionStorage.GetItemAsync<User>("userData");

            if (user != null)
            {
                Navigate.NavigateTo("/");
            }
        }
    }

    private async void PerformLogin()
    {
        User? user = userService.GetUserByUsername(username);

        if (user != null)
        {
            if (user.Hashed == password)
            {
                await sessionStorage.SetItemAsync("userData", new User() { UserId = user.UserId, Username = user.Username, Email = user.Email, Hashed = user.Hashed });

                Navigate.NavigateTo("/");
            } else
            {
                errorMessage = "Account login failed";
            }
        } else
        {
            errorMessage = "Account login failed";
        }
    }
}
